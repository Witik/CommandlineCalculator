#+title: Title
#+author: Sasja LASTNAME?, Martin LASTNMAME?, Martijn Terpstra
#+date: \today
#+OPTIONS: toc:t
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [11pt,a4paper]
#+LATEX_HEADER: \bibliographystyle{plain}
#+LATEX_HEADER: \usepackage{microtype}
#+LATEX_HEADER: \usepackage{tikz}
#+LATEX_HEADER: \usepackage{circuitikz}
#+LATEX_HEADER: \usetikzlibrary{tikzmark,decorations.pathmorphing}

#+BEGIN_LaTeX
%% Ik heb dit document in Emacs met org-mode gemaakt en het vervolgens
%% naar latex geexporteerd. Het orginele bestand is het bestand met de
%% .org extensie.

%% Ikzelf vind org-mode bestanden makkelijkere te lezen maar als dit voor
%% jullie lastig is, is het waarschijnlijk makkelijker om alles gelijk in
%% LateX te scrijven.

%% Martijn
#+END_LaTeX

* Tasks
*** Write requirements
***** Overall use of the program
      the program will continuously prompt the user for input. It will
      continue to prompt the user for input until it receives the
      =exit()= function as input and then terminates.

      On invalid input the program the program will show an error
      indicating the nature of the invalid input, but will not terminate.

      Valid input is on of the following
      - A function assignment
      - A variables assignment
      - An expression
      - An equality test
***** Memory
      The program will keep defined variables and function in memory
      until the program terminates.


      The program will be initialized with the following variables
      - =pi=, whose value is =3.141592653589793=
      - =e=, whose value is =2.718281828459045=

      The program will be initialized with the following functions
      - =floor=, which rounds down
      - =ceil=, which rounds up
      - =round=, which rounds to the nearest  whole number.
      - =log=
      - =ln=, which
      - =sqrt=, which returns the square root of its
      - =root=, which returns the Nth root of it first argument.  (WARNING: does not work properly)
      - =exit= , which will terminate the program


      /BTW floor,ceil and round work incorrectly for NEGATIVE numbers/
***** Expression
      A valid expression is defined using Context-free Grammar

      Expression \rightarrow Seperator Expression Seperator

      Expression \rightarrow (Expression)

      Expression \rightarrow Number

      Expression \rightarrow Variable

      Expression \rightarrow PrefixFunction Seperator (Expression)

      Expression \rightarrow Expression Seperator InfixFunction Seperator Expression

      Seperator \rightarrow SPACE | \empty | Seperator Seperator

      Number \rightarrow 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | Number Number

      Variable \rightarrow Name

      PrefixFunction \rightarrow Name

      Name \rightarrow SmallLetter | CapitalLetter | NameName

      SmallLetter \rightarrow a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z

      CapticalLetter \rightarrow A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z

      InfixFunction \rightarrow / | * | - | + | ^


***** Variable assignments
      A variable assignment is in the form

      =VARIABLENAME = EXPRESSION=

      Where a valid =VARIABLENAME= is a string of 1 or more letters and
      is case-sensitive.
***** Equality tests
      An equality test is in the form

      =EXPRESSION1 = EXPRESSION2=

      Where =EXPRESSION1= and =EXPRESSION2= are valid expressions and
      =EXPRESSION1= is *not* the name of a variable

***** Functions assignments
      A function assignment is in the form

      =FUNCTIONNAME(ARGUMENT):=EXPRESSION=
***** Expression parsing
      Intermediate steps and calculations are show
      The result of the expression is shown
*** Design test cases
***** Functions assignments
***** Variable assignments
***** Equality tests
***** Expression parsing
*** Assign Test cases
*** Execute test cases (automation?)
* Short requirements
  #+BEGIN_QUOTE
  From this description we can deduce that a test approach must at least describe:
  - the product that will be tested,
  - the controlled environment in which it will be tested,
  - the specified procedure following which it will be tested,
  - the quality characteristics that will be tested, and
  - the specification.
  #+END_QUOTE

* Template
** Introduction
   State the objectives and overview of the document at a high-level.
** Test Goal
   What is the overall goal of the testing effort, what are the final deliverables, who are the
   stakeholders, i.e., for whom are you doing it, applicable laws and (international) standards.
** The Product
   Identification of the SUT: What is the product (SUT â€“ System Under Test) being tested, its
   version, its operation context, required platform, its interfaces, and how is it executed.
** The Specification
   What is the test basis, i.e., its specification, and all documentation describing what the SUT
   shall do. (Do not include specification documents, but refer to them.)
** Risks
   What are the risks of the product (at a high level), of the development process, and of the
   test process. How are risks handled and mitigated.
** Test Environment
   What is the (controlled) environment in which experiments are performed, what is the test
   architecture, i.e., how are SUT and test system positioned and connected, which environment
   and infrastructure (hardware, software, middleware, databases, libraries, . . .) are required for
   testing, how to access the SUT and its interfaces, which stubs and drivers are needed, are
   tests performed in a laboratory, production, or user environment.
** Quality Characteristics
   Which quality characteristics are tested (IS 9126 or other quality model: functionality, reli-
   ability, usability, . . .),
** Levels and Types of Testing
   Which levels and types of tests are performed: (V-model: unit, integration, module, sys-
   tem, acceptance, . . .), which units, components, subsystems, . . . are tested and for what,
   accessibility (white/black box), verification vs. validation tests, . . ..
** Who will do the Testing
   Who tests what, and what are the roles: developer, (independent) tester, user, alpha, certi-
   fication, . . .),
** Test Generation Techniques
   As far as already known or required, e.g., by applicable standards: black-box (equivalence
   partitioning, boundary value analysis, error guessing, cause-effect graphing, decision tables,
   state transitions, use case testing, exploratory testing, . . .), white-box (path, statement,
   (multiple) condition, decision/branch, function, call, loop, MC/DC coverage, . . .), mutation
   testing, combinatorial testing, . . ..
** Test Automation
   As far as applicable, which parts of the testing will be automated, which test tools will be
   used in the various phases of the testing process (planning, preparation, test generation, test
   execution, completion), which tests are performed manually, what is automated, and which
   tools have to be obtained or developed.
** Exit Criteria
   What are the criteria for going from one test phase to the next, when is testing finished,
   when is the product considered sufficiently tested, what are the (final) evaluation criteria.
** Testware
   Which test products are recorded, consolidated, and kept for reuse.
** Issue Registration
   How are issues (defects) registered, analysed, reported, and handled.

* Observations martijn
*** Overall
      - Comments only in util/BigFunctions.java
*** Expression that crash
    should the program CRASH on wrong input?
    - $1/0$
    - $log(-1)$
    - $\phi = 7$
    - Using TABS in any expression
    - using arrow keys

    The program crashes on some but not all wrong input.
    - $seven + eight$ does not crash.
*** Expression with a wrong result
    - $(1 / 300) * 300 = 0.9999999999999900$. should be $1$
    - $2^(-1) = 0$. should be $0.5$
    - $log( 10 ^ 1234)$ outputs an intermediate result, then crashes. should output $1234$
    - $0^0$ return $1$, is undefined

*** Other
    - Input reading is primitive, cant go back without deleting.
    - =ln(log( 10^e ))= throws an error Could not convert bigInteger into long, but still gives the correct answer
    - =1 Banana \phi = 1=
    - Control + \ gives a lot of debugging information
    - =x=7=
      =7(x)= gives =7=, not =49=
    - =f(x):=7=, works fine
      =f(x):=f(x)+1=, work if the function f has previously been defined
      =f(1)= crashed due to an infinite loop
    - Using 9999 character variable names gives an exception, 999 characters is fine.
    - =x(z):=z=
      =f(x):=x()=
      =f(7)=
      crashes
    - =f(x):=1=
      =f(x):=f(2)=
      =f(3)=, crashes, expected =1=
    - Equality?, can either return -1,0, or 1
    - =z=7= \ne =7=z=
