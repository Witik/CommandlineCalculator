-- TODO: ons model geeft nog geen result terug


CHANDEF  Chans ::=  Action  :: CalcAction
                    ; Result :: CalcResult
ENDDEF

MODELDEF Model ::=
    CHAN IN    Action
    CHAN OUT   Result

    BEHAVIOUR
            CalculatorLoop [ Action, Result] ( Memory(FuncNil, VarNil) )

ENDDEF


PROCDEF  CalculatorLoop  [ Act :: CalcAction; Res :: CalcResult] (mem :: CalcMemory)
    ::=
            Act ? opn [[ isExpression(opn)  ]]
                >->
            Res ! IntResult(operationToInt(exp(opn)))
                >->
            CalculatorLoop [ Act, Res] (mem)
			
 --       ##
 --           Act ? opn [[ isExit(opn) ]]
 --               >->
 --           Res ! StringResult("Bye!")
 
 ##
            Act ? opn [[ isFuncDef(opn) ]]
                >->
            CalculatorLoop [Act, Res] (putFuncInMemory(funI(opn),mem))
			
        ##
            Act ? opn [[ isFuncAppl(opn) /\ funcMemContainsFunc(funAI(opn),funcMem(mem))]]
                >->
            Res ! IntResult(funcResult(funAI(opn)))
                >->
            CalculatorLoop [Act, Res] (mem)
			
        ##
            Act ? opn [[ isFuncAppl(opn) /\ not(funcMemContainsFunc(funAI(opn),funcMem(mem)))]]
                >->
            Res ! StringResult(funcErrResult(funAI(opn)))
                >->
            CalculatorLoop [Act, Res] (mem)

        ##
            Act ? opn [[ isVarDef(opn) ]]
                >->
            Res ! IntResult(varDefResult(varI(opn)))
                >->
            CalculatorLoop [Act, Res] (putVarInMemory(varI(opn),mem))
			
        ##
            Act ? opn [[ isVarAppl(opn) /\ varMemContainsVar(varAI(opn),varMem(mem))]]
                >->
            Res ! IntResult(varResult(varAI(opn)))
                >->
            CalculatorLoop [Act, Res] (mem)
			
        ##
            Act ? opn [[ isVarAppl(opn) /\ not(varMemContainsVar(varAI(opn),varMem(mem)))]]
                >->
            Res ! StringResult(varErrResult(varAI(opn)))
                >->
            CalculatorLoop [Act, Res] (mem)
ENDDEF



CNECTDEF  Sut
    ::=
        CLIENTSOCK

-- verwacht input
        CHAN  OUT  Action            HOST "localhost"  PORT 7890
        ENCODE     Action ? opn      ->  ! calcActionToString(opn)

-- echo'd iets terug
        CHAN  IN   Result            HOST "localhost"  PORT 7890
        DECODE     Result ! calcResultFromString(trim(s))     <-   ? s
ENDDEF

--
TYPEDEF  Operation
    ::=
          Plus  { p1, p2 :: Operation }
        | Minus { m1, m2 :: Operation }
        | Times { t1, t2 :: Operation }
		--| Divide { p1, p2 :: Operation }
		| Integer { i :: Int }
ENDDEF

TYPEDEF CalcAction
    ::=
            Expression { exp :: Operation }
        |   FuncDef { funI :: Int }
        |   VarDef  { varI :: Int }
        |   FuncAppl { funAI :: Int }
        |   VarAppl  { varAI :: Int }
        |   StringAction { str :: String }
        |   Exit
ENDDEF

TYPEDEF CalcResult
    ::=
            IntResult { i :: Int }
        |   StringResult { str :: String }
ENDDEF

TYPEDEF CalcMemory
    ::=
        Memory  { funcMem :: FuncMemory
                ; varMem :: VarMemory
                }
ENDDEF

TYPEDEF FuncMemory
    ::=
            FuncCons    { hd :: Int
                        ; tl :: FuncMemory
                        }
        |   FuncNil
ENDDEF

TYPEDEF VarMemory
    ::=
            VarCons { hd :: Int
                    ; tl :: VarMemory
                    }
        |   VarNil
ENDDEF

FUNCDEF putVarInMemory (var :: Int; mem :: CalcMemory) :: CalcMemory ::=
    IF varMemContainsVar(var,varMem(mem)) THEN
        mem
    ELSE 
        Memory(funcMem(mem),VarCons(modVar(var), varMem(mem)))
    FI
ENDDEF

FUNCDEF putFuncInMemory (func :: Int; mem :: CalcMemory) :: CalcMemory ::=
    IF funcMemContainsFunc(func,funcMem(mem)) THEN
        mem
    ELSE 
        Memory(FuncCons(modFunc(func),funcMem(mem)),varMem(mem))
    FI
ENDDEF

FUNCDEF varMemContainsVar(var :: Int; mem :: VarMemory) :: Bool ::=
    IF isVarNil(mem) THEN
        False
    ELSE 
        IF hd(mem) == modVar(var) THEN
            True
        ELSE
            varMemContainsVar(var, tl(mem))
        FI
    FI
ENDDEF

FUNCDEF funcMemContainsFunc(func :: Int; mem :: FuncMemory) :: Bool ::=
    IF isFuncNil(mem) THEN
        False
    ELSE 
        IF hd(mem) == modFunc(func) THEN
            True
        ELSE
            funcMemContainsFunc(func, tl(mem))
        FI
    FI
ENDDEF

FUNCDEF calcResultFromString(result :: String) :: CalcResult ::=
    IF (isNumerical(result)) THEN
        IntResult(fromString(result))
    ELSE
        StringResult(result)
    FI
ENDDEF

FUNCDEF isNumerical(numString :: String) :: Bool ::=
    strinre(numString, REGEX('-?[0-9]*'))
ENDDEF

FUNCDEF calcActionToString(act :: CalcAction) :: String ::=
    IF isExpression(act) THEN
        operationToString(exp(act))
    ELSE IF isFuncDef(act) THEN
        getFuncDef(funI(act))
    ELSE IF isVarDef(act) THEN
        getVarDef(varI(act))
    ELSE IF isFuncAppl(act) THEN
        getFuncApplication(funAI(act))
    ELSE IF isVarAppl(act) THEN
        getVarApplication(varAI(act))
    ELSE IF isStringAction(act) THEN
        str(act)
    ELSE
        "exit()"
    FI FI FI FI FI FI
ENDDEF

FUNCDEF getFuncDef(id :: Int) :: String ::=
    IF id == 0 THEN
        "id(x) := x"
    ELSE IF id == 1 THEN
        "f(x) := x*3"
    ELSE IF id == 2 THEN
        "g(x,y) := x+y"
    ELSE
        getFuncDef(modFunc(id))
    FI FI FI
ENDDEF

FUNCDEF getVarDef(id :: Int) :: String ::=
    IF id == 0 THEN
        "varx = 0"
    ELSE IF id == 1 THEN
        "vary = 5*2"
    ELSE IF id == 2 THEN
        "varz = 521+231"
    ELSE
        getVarDef(modVar(id))
    FI FI FI
ENDDEF

FUNCDEF getFuncApplication(id :: Int) :: String ::=
    IF id == 0 THEN
        "id(5)"
    ELSE IF id == 1 THEN
        "f(3)"
    ELSE IF id == 2 THEN
        "g(7,3)"
    ELSE
        getFuncApplication(modFunc(id))
    FI FI FI
ENDDEF

FUNCDEF getVarApplication(id :: Int) :: String ::=
    IF id == 0 THEN
        "5+varx"
    ELSE IF id == 1 THEN
        "vary-1"
    ELSE IF id == 2 THEN
        "(varz+248)/100"
    ELSE
        getVarApplication(modVar(id))
    FI FI FI
ENDDEF

FUNCDEF funcErrResult(id :: Int) :: String ::=
    IF id == 0 THEN
        "Cannot find identifier 'id' in memory"
    ELSE IF id == 1 THEN
        "Cannot find identifier 'f' in memory"
    ELSE IF id == 2 THEN
        "Cannot find identifier 'g' in memory"
    ELSE
        funcErrResult(modFunc(id))
    FI FI FI
ENDDEF

FUNCDEF varErrResult(id :: Int) :: String ::=
    IF id == 0 THEN
        "Cannot find identifier 'varx' in memory"
    ELSE IF id == 1 THEN
        "Cannot find identifier 'vary' in memory"
    ELSE IF id == 2 THEN
        "Cannot find identifier 'varz' in memory"
    ELSE
        varErrResult(modVar(id))
    FI FI FI
ENDDEF

FUNCDEF funcResult(id :: Int) :: Int ::=
    IF id == 0 THEN
        5
    ELSE IF id == 1 THEN
        9
    ELSE IF id == 2 THEN
        10
    ELSE
        funcResult(modFunc(id))
    FI FI FI
ENDDEF

FUNCDEF varResult(id :: Int) :: Int ::=
    IF id == 0 THEN
        5
    ELSE IF id == 1 THEN
        9
    ELSE IF id == 2 THEN
        10
    ELSE
        varResult(modVar(id))
    FI FI FI
ENDDEF

FUNCDEF varDefResult(id :: Int) :: Int ::=
    IF id == 0 THEN
        0
    ELSE IF id == 1 THEN
        10
    ELSE IF id == 2 THEN
        752
    ELSE
        varDefResult(modFunc(id))
    FI FI FI
ENDDEF

FUNCDEF modFunc(id :: Int) :: Int ::=
	id % 3
ENDDEF

FUNCDEF modVar(id :: Int) :: Int ::=
	id % 3
ENDDEF

FUNCDEF operationToString(op::Operation) :: String ::=
	IF isPlus(op) THEN
            "(" ++ operationToString(p1(op)) ++ " + " ++ operationToString(p2(op)) ++ ")"
	ELSE IF isMinus(op) THEN
            "(" ++ operationToString(m1(op)) ++ " - " ++ operationToString(m2(op)) ++ ")"
	ELSE IF isTimes(op) THEN
            "(" ++ operationToString(t1(op)) ++ " * " ++ operationToString(t2(op)) ++ ")"
	ELSE IF isInteger(op) THEN
            toString(i(op))
	ELSE
            ""
    FI FI FI FI
ENDDEF

--


FUNCDEF operationToInt(op::Operation) :: Int ::=
    IF isPlus(op) THEN
        operationToInt(p1(op)) + operationToInt(p2(op))
    ELSE IF isMinus(op) THEN
        operationToInt(m1(op))  - operationToInt(m2(op))
    ELSE IF isTimes(op) THEN
        operationToInt(t1(op)) * operationToInt(t2(op))
    ELSE IF isInteger(op) THEN
        i(op)
    ELSE
        0
    FI FI FI FI
ENDDEF

FUNCDEF trim(str :: String) :: String ::=
	IF len(str) > 0 THEN
		trimStart(str,0)
	ELSE
		str
	FI
ENDDEF

FUNCDEF trimStart(str :: String; i :: Int) :: String ::=
	IF len(str) <= i THEN
		str
	ELSE IF isWhitespace(at(str,i)) THEN
		trimStart(str,i+1)
	ELSE
		trimEnd(subStr(str,i,len(str)),0)
	FI FI
ENDDEF

FUNCDEF trimEnd(str :: String; i :: Int) :: String ::=
	IF len(str) <= i THEN
		str
	ELSE IF isWhitespace(at(str,len(str)-(i+1))) THEN
		trimEnd(str,i+1)
	ELSE
		subStr(str,0,len(str)-i)
	FI FI
ENDDEF

FUNCDEF subStr(str :: String; start :: Int; len :: Int) :: String ::=
	IF len==0 THEN
		""
	ELSE IF len(str) < start THEN
		""
	ELSE
		at(str,start) ++ subStr(str,start+1,len-1)
	FI FI
ENDDEF

FUNCDEF isWhitespace(str :: String) :: Bool ::=
	IF len(str) <> 1 THEN
		False
	ELSE
		(str == " ") \/ (str == "\n") \/ (str == "\r") \/ (str == "\t") 
	FI
ENDDEF
